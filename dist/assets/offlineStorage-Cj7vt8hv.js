const e={USERS:"users",EVENTS:"events",TASKS:"tasks",PRAYERS:"prayers",RELATIONSHIPS:"relationships",MEETINGS:"meetings",INTERESTED:"interested",DASHBOARD_STATS:"dashboard_stats",METADATA:"metadata"};async function t(t,a){const n=await new Promise((t,a)=>{const n=indexedDB.open("7care-offline-storage",1);n.onerror=()=>a(n.error),n.onsuccess=()=>t(n.result),n.onupgradeneeded=t=>{const a=t.target.result;Object.values(e).forEach(e=>{a.objectStoreNames.contains(e)||a.createObjectStore(e,{keyPath:"id",autoIncrement:!0})})}}),o=n.transaction(t,"readwrite").objectStore(t);await new Promise((e,t)=>{const a=o.clear();a.onsuccess=()=>e(void 0),a.onerror=()=>t(a.error)});for(const e of a)await new Promise((t,a)=>{const n=o.add(e);n.onsuccess=()=>t(void 0),n.onerror=()=>a(n.error)});n.close()}async function a(a){const n=[{name:"Usuários",endpoint:"/api/users",store:e.USERS},{name:"Eventos",endpoint:"/api/events",store:e.EVENTS},{name:"Tarefas",endpoint:"/api/tasks",store:e.TASKS},{name:"Orações",endpoint:"/api/prayers",store:e.PRAYERS},{name:"Relacionamentos",endpoint:"/api/relationships",store:e.RELATIONSHIPS},{name:"Reuniões",endpoint:"/api/meetings",store:e.MEETINGS},{name:"Interessados",endpoint:"/api/interested",store:e.INTERESTED},{name:"Dashboard",endpoint:"/api/dashboard/stats",store:e.DASHBOARD_STATS},{name:"Visitas",endpoint:"/api/dashboard/visits",store:"dashboard_visits"},{name:"Aniversários",endpoint:"/api/users/birthdays",store:"birthdays"},{name:"Check-ins Emocionais",endpoint:"/api/emotional-checkins/admin",store:"emotional_checkins"}],o=[{name:"Dashboard",url:"/dashboard"},{name:"Usuários",url:"/users"},{name:"Calendário",url:"/calendar"},{name:"Tarefas",url:"/tasks"},{name:"Orações",url:"/prayers"},{name:"Chat",url:"/chat"},{name:"Interessados",url:"/interested"},{name:"Meus Interessados",url:"/my-interested"},{name:"Gamificação",url:"/gamification"},{name:"Relatórios",url:"/reports"},{name:"Configurações",url:"/settings"},{name:"Notificações",url:"/notifications"}],s=n.length+o.length;let r=0;for(const{name:e,endpoint:c,store:l}of n)try{a?.(Math.round(r/s*100),`Baixando ${e}...`);const n=await fetch(c,{credentials:"include"});if(!n.ok)throw new Error(`HTTP ${n.status}`);const o=await n.json(),i=Array.isArray(o)?o:[o];await t(l,i),r++}catch(d){r++}for(const{name:e,url:t}of o){try{a?.(Math.round(r/s*100),`Carregando página ${e}...`),await fetch(t,{credentials:"include"}).catch(()=>{}),r++}catch(d){r++}await new Promise(e=>setTimeout(e,100))}const i={id:1,downloadedAt:(new Date).toISOString(),version:1,totalEndpoints:n.length,totalPages:o.length,totalItems:r};await t(e.METADATA,[i]),a?.(100,"Download concluído!"),localStorage.setItem("offline-data-downloaded","true"),localStorage.setItem("offline-data-downloaded-at",i.downloadedAt),localStorage.setItem("offline-total-pages",o.length.toString()),localStorage.setItem("offline-total-apis",n.length.toString())}async function n(){if(!("estimate"in navigator.storage))return 0;try{return(await navigator.storage.estimate()).usage||0}catch{return 0}}export{a as downloadAllData,n as getStorageSize};
