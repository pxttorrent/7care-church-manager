import fetch from 'node-fetch';

// Configura√ß√£o da nomea√ß√£o
const CONFIG_ID = 55;
const VOTERS = [2361, 2187, 2327, 2185, 2124, 2146, 2368, 2221, 2193];
const CANDIDATES = [2189, 2274, 2337, 2350, 2238, 2361, 2105, 2106, 2234, 2187];
const POSITIONS = [
  "Primeiro Anci√£o(√£)",
  "Anci√£o/Anci√£ Teen", 
  "Anci√£o/Anci√£ Jovem",
  "Secret√°rio(a)",
  "Secret√°rio(a) Associado(a)",
  "Secret√°rio(a) Teen",
  "Tesoureiro(a)",
  "Tesoureiro(a) Associado(a)",
  "Tesoureiro(a) Teen",
  "Patrim√¥nio",
  "Di√°conos",
  "Di√°cono(s) Teen",
  "Primeiro Di√°cono",
  "Diaconisas",
  "Diaconisa(s) Teen",
  "Primeira Diaconisa",
  "Diretor(a)",
  "Diretor(a) Associado(a)",
  "Disc√≠pulo Teen",
  "Minist√©rio da Crian√ßa ‚Äì Coordenador(a)",
  "Minist√©rio da Crian√ßa ‚Äì Coordenador(a) Associado(a)",
  "Minist√©rio dos Adolescentes ‚Äì Coordenador(a)",
  "Minist√©rio dos Adolescentes ‚Äì Coordenador(a) Associado(a)",
  "Minist√©rio Jovem ‚Äì Diretor(a)",
  "Minist√©rio Jovem ‚Äì Diretor(a) Associado(a)",
  "Clube de Aventureiros ‚Äì Diretor(a)",
  "Clube de Aventureiros ‚Äì Diretor(a) Associado(a)",
  "Clube de Aventureiros ‚Äì Disc√≠pulo Teen",
  "Clube de Desbravadores ‚Äì Diretor(a)",
  "Clube de Desbravadores ‚Äì Diretor(a) Associado(a)",
  "Clube de Desbravadores ‚Äì Disc√≠pulo Teen",
  "Professores(as) das Unidades: Beb√™s",
  "Professores(as) das Unidades: Iniciantes",
  "Professores(as) das Unidades: Infantis",
  "Professores(as) das Unidades: Prim√°rios",
  "Professores(as) das Unidades: Pr√©-adolescentes",
  "Professores(as) das Unidades: Adolescentes",
  "Secret√°rio(a) Escola Sabatina",
  "Diretor(a) Associado(a) Escola Sabatina",
  "Disc√≠pulo Teen Escola Sabatina",
  "Diretor(a) Minist√©rio Pessoal",
  "Diretor(a) Associado(a) Minist√©rio Pessoal",
  "Disc√≠pulo Teen Minist√©rio Pessoal",
  "Evangelismo ‚Äì Diretor(a)",
  "Evangelismo ‚Äì Diretor(a) Associado(a)",
  "Evangelismo ‚Äì Secret√°rio(a)",
  "Evangelismo ‚Äì Disc√≠pulo Teen",
  "Coordenador(a) de Classes B√≠blicas",
  "Coordenador(a) de Interessados",
  "Diretor(a) ASA",
  "Diretor(a) Associado(a) ASA",
  "Disc√≠pulo Teen ASA",
  "Casal Diretor",
  "Casal Associado",
  "Disc√≠pulo Teen Minist√©rio da Fam√≠lia",
  "Diretora Minist√©rio da Mulher",
  "Diretora Associada Minist√©rio da Mulher",
  "Disc√≠pulo Teen Minist√©rio da Mulher",
  "L√≠der Minist√©rio da Recep√ß√£o",
  "Equipe Minist√©rio da Recep√ß√£o",
  "Diretor Minist√©rio do Homem",
  "Diretor Associado Minist√©rio do Homem",
  "Disc√≠pulo Teen Minist√©rio do Homem",
  "Diretor(a) Minist√©rio da Sa√∫de",
  "Diretor(a) Associado(a) Minist√©rio da Sa√∫de",
  "Disc√≠pulo Teen Minist√©rio da Sa√∫de",
  "Diretor(a) Minist√©rio das Possibilidades",
  "Diretor(a) Associado(a) Minist√©rio das Possibilidades",
  "Disc√≠pulo Teen Minist√©rio das Possibilidades",
  "Diretor(a) Minist√©rio da M√∫sica",
  "Diretor(a) Associado(a) Minist√©rio da M√∫sica",
  "Disc√≠pulo Teen Minist√©rio da M√∫sica",
  "Diretor(a) Comunica√ß√£o",
  "Diretor(a) Associado(a) Comunica√ß√£o",
  "Social Media (redes sociais)",
  "Disc√≠pulo Teen Comunica√ß√£o",
  "Diretor(a) Sonoplastia",
  "Diretor(a) Associado(a) Sonoplastia",
  "Equipe Sonoplastia"
];

// Fun√ß√£o para fazer requisi√ß√µes
async function makeRequest(url, options = {}) {
  try {
    const response = await fetch(url, {
      headers: {
        'Content-Type': 'application/json',
        'Cache-Control': 'no-cache',
        'Pragma': 'no-cache',
        ...options.headers
      },
      ...options
    });
    
    const data = await response.json();
    return { success: response.ok, data, status: response.status };
  } catch (error) {
    return { success: false, error: error.message };
  }
}

// Fun√ß√£o para aguardar
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// Fun√ß√£o para obter status da elei√ß√£o
async function getElectionStatus() {
  const result = await makeRequest('https://7care.netlify.app/api/elections/status');
  return result;
}

// Fun√ß√£o para obter dashboard
async function getDashboard() {
  const result = await makeRequest(`https://7care.netlify.app/api/elections/dashboard?configId=${CONFIG_ID}`);
  return result;
}

// Fun√ß√£o para simular indica√ß√£o
async function simulateNomination(voterId, positionId, candidateId) {
  const result = await makeRequest('https://7care.netlify.app/api/elections/nominate', {
    method: 'POST',
    body: JSON.stringify({
      positionId,
      candidateId
    })
  });
  return result;
}

// Fun√ß√£o para simular voto
async function simulateVote(voterId, positionId, candidateId) {
  const result = await makeRequest('https://7care.netlify.app/api/elections/vote', {
    method: 'POST',
    body: JSON.stringify({
      positionId,
      candidateId
    })
  });
  return result;
}

// Fun√ß√£o para avan√ßar para pr√≥xima posi√ß√£o
async function advanceToNextPosition() {
  const result = await makeRequest('https://7care.netlify.app/api/elections/next-position', {
    method: 'POST'
  });
  return result;
}

// Fun√ß√£o principal de automa√ß√£o
async function automateNomination() {
  console.log('üöÄ Iniciando automa√ß√£o da nomea√ß√£o...');
  console.log(`üìä Configura√ß√£o ID: ${CONFIG_ID}`);
  console.log(`üë• Votantes: ${VOTERS.length}`);
  console.log(`üéØ Cargos: ${POSITIONS.length}`);
  
  // Obter status inicial
  const initialStatus = await getDashboard();
  if (!initialStatus.success) {
    console.error('‚ùå Erro ao obter status inicial:', initialStatus.error);
    return;
  }
  
  console.log('üìã Status inicial:', initialStatus.data);
  
  // Processar cada posi√ß√£o
  for (let positionIndex = 0; positionIndex < POSITIONS.length; positionIndex++) {
    const positionId = POSITIONS[positionIndex];
    console.log(`\nüéØ Processando cargo ${positionIndex + 1}/${POSITIONS.length}: ${positionId}`);
    
    // FASE 1: INDICA√á√ïES
    console.log('üìù Fase 1: Simulando indica√ß√µes...');
    
    // Simular indica√ß√µes de alguns votantes
    const numIndications = Math.min(5, VOTERS.length); // 5 indica√ß√µes por cargo
    for (let i = 0; i < numIndications; i++) {
      const voterId = VOTERS[i];
      const candidateId = CANDIDATES[i % CANDIDATES.length];
      
      console.log(`   üë§ Votante ${voterId} indica candidato ${candidateId}`);
      
      const indicationResult = await simulateNomination(voterId, positionId, candidateId);
      if (indicationResult.success) {
        console.log(`   ‚úÖ Indica√ß√£o realizada`);
      } else {
        console.log(`   ‚ùå Erro na indica√ß√£o:`, indicationResult.error || indicationResult.data);
      }
      
      await sleep(100); // Pequena pausa entre indica√ß√µes
    }
    
    // FASE 2: VOTA√á√ïES (se houver candidatos indicados)
    console.log('üó≥Ô∏è Fase 2: Simulando vota√ß√µes...');
    
    // Simular vota√ß√µes de todos os votantes
    for (const voterId of VOTERS) {
      const candidateId = CANDIDATES[Math.floor(Math.random() * CANDIDATES.length)];
      
      console.log(`   üó≥Ô∏è Votante ${voterId} vota no candidato ${candidateId}`);
      
      const voteResult = await simulateVote(voterId, positionId, candidateId);
      if (voteResult.success) {
        console.log(`   ‚úÖ Voto registrado`);
      } else {
        console.log(`   ‚ùå Erro no voto:`, voteResult.error || voteResult.data);
      }
      
      await sleep(100); // Pequena pausa entre votos
    }
    
    // Avan√ßar para pr√≥xima posi√ß√£o
    console.log('‚è≠Ô∏è Avan√ßando para pr√≥xima posi√ß√£o...');
    const advanceResult = await advanceToNextPosition();
    if (advanceResult.success) {
      console.log(`   ‚úÖ Avan√ßou para posi√ß√£o ${positionIndex + 2}`);
    } else {
      console.log(`   ‚ùå Erro ao avan√ßar:`, advanceResult.error || advanceResult.data);
    }
    
    await sleep(500); // Pausa entre posi√ß√µes
  }
  
  // Obter resultados finais
  console.log('\nüìä Obtendo resultados finais...');
  const finalResults = await getDashboard();
  if (finalResults.success) {
    console.log('üéâ Nomea√ß√£o automatizada conclu√≠da!');
    console.log('üìã Resultados finais:', JSON.stringify(finalResults.data, null, 2));
  } else {
    console.error('‚ùå Erro ao obter resultados finais:', finalResults.error);
  }
}

// Executar automa√ß√£o
automateNomination().catch(console.error);
