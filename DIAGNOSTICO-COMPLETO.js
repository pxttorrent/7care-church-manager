// ==========================================
// DIAGN√ìSTICO COMPLETO - SISTEMA DE PONTUA√á√ÉO
// ==========================================
// Cole no Console (F12) em https://7care.netlify.app
// ==========================================

console.clear();
console.log('%cüîç DIAGN√ìSTICO COMPLETO DO SISTEMA DE PONTUA√á√ÉO', 'font-size: 20px; font-weight: bold; color: #FF9800; background: #000; padding: 10px;');
console.log('‚ïê'.repeat(80));

(async () => {
  try {
    // 1. Verificar usu√°rios
    console.log('\n%cüë• [1/4] Verificando usu√°rios...', 'font-size: 16px; color: #2196F3; font-weight: bold;');
    const usersResponse = await fetch('/api/users');
    const users = await usersResponse.json();
    
    console.log(`‚úÖ Total de usu√°rios: ${users.length}`);
    console.log(`   Admins: ${users.filter(u => u.role === 'admin').length}`);
    console.log(`   N√£o-admins: ${users.filter(u => u.role !== 'admin').length}`);
    
    // Verificar campos de pontua√ß√£o de alguns usu√°rios
    console.log('\nüìã Primeiros 3 usu√°rios n√£o-admin:');
    users.filter(u => u.role !== 'admin').slice(0, 3).forEach((u, i) => {
      console.log(`\n   ${i+1}. ${u.name}`);
      console.log(`      Pontos atuais: ${u.points || 0}`);
      console.log(`      Engajamento: ${u.engajamento || 'n√£o definido'}`);
      console.log(`      Classifica√ß√£o: ${u.classificacao || 'n√£o definido'}`);
      console.log(`      Dizimista: ${u.dizimista_type || u.dizimistaType || 'n√£o definido'}`);
      console.log(`      Ofertante: ${u.ofertante_type || u.ofertanteType || 'n√£o definido'}`);
    });
    
    // 2. Verificar configura√ß√£o de pontos
    console.log('\n%cüìä [2/4] Verificando configura√ß√£o de pontos...', 'font-size: 16px; color: #FF9800; font-weight: bold;');
    const configResponse = await fetch('/api/system/points-config');
    
    if (!configResponse.ok) {
      console.error('‚ùå ERRO: Configura√ß√£o de pontos N√ÉO encontrada!');
      console.error('   Status HTTP:', configResponse.status);
      console.log('\nüí° SOLU√á√ÉO:');
      console.log('   A tabela points_configuration pode estar vazia!');
      console.log('   Execute este comando para criar:');
      console.log('\n   fetch("/api/system/points-config/reset", {method: "POST"})');
      console.log('     .then(r => r.json())');
      console.log('     .then(d => console.log("‚úÖ Config criada:", d));');
      return;
    }
    
    const config = await configResponse.json();
    console.log('‚úÖ Configura√ß√£o encontrada!');
    console.log('   Engajamento:', config.engajamento);
    console.log('   Dizimista:', config.dizimista);
    console.log('   Classifica√ß√£o:', config.classificacao);
    
    // 3. Testar c√°lculo de um usu√°rio
    console.log('\n%cüî¢ [3/4] Testando c√°lculo de pontos...', 'font-size: 16px; color: #9C27B0; font-weight: bold;');
    const testUser = users.find(u => u.role !== 'admin');
    
    if (testUser) {
      console.log(`   Testando com: ${testUser.name} (ID: ${testUser.id})`);
      console.log(`   Pontos atuais: ${testUser.points || 0}`);
      
      const pointsResponse = await fetch(`/api/users/${testUser.id}/points-details`);
      if (pointsResponse.ok) {
        const pointsData = await pointsResponse.json();
        console.log('‚úÖ C√°lculo funcionando!');
        console.log(`   Pontos calculados: ${pointsData.points}`);
        console.log(`   Diferen√ßa: ${(pointsData.points || 0) - (testUser.points || 0)}`);
        
        if (testUser.points === pointsData.points) {
          console.log('\n‚ö†Ô∏è PONTOS J√Å EST√ÉO CORRETOS!');
          console.log('   Por isso retorna 0 usu√°rios atualizados.');
          console.log('   Os pontos j√° foram calculados anteriormente.');
        } else {
          console.log('\n‚úÖ PONTOS PRECISAM SER ATUALIZADOS!');
          console.log(`   ${testUser.points} ‚Üí ${pointsData.points}`);
        }
      } else {
        console.error('‚ùå Erro ao calcular pontos!');
        const error = await pointsResponse.text();
        console.error('   Erro:', error);
      }
    }
    
    // 4. Disparar rec√°lculo e monitorar
    console.log('\n%cüîÑ [4/4] Testando rec√°lculo completo...', 'font-size: 16px; color: #F44336; font-weight: bold;');
    console.log('Disparando rec√°lculo de TODOS os usu√°rios...\n');
    
    const recalcStart = Date.now();
    const recalcResponse = await fetch('/api/system/recalculate-points', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    });
    
    if (!recalcResponse.ok) {
      console.error('‚ùå ERRO HTTP:', recalcResponse.status);
      const errorText = await recalcResponse.text();
      console.error('   Resposta:', errorText);
      return;
    }
    
    const recalcResult = await recalcResponse.json();
    const recalcDuration = ((Date.now() - recalcStart) / 1000).toFixed(1);
    
    console.log('‚ïê'.repeat(80));
    console.log('%cüìä RESULTADO DO REC√ÅLCULO', 'font-size: 18px; font-weight: bold; color: #4CAF50;');
    console.log('‚ïê'.repeat(80));
    console.log('‚úÖ Sucesso:', recalcResult.success);
    console.log('üë• Total de usu√°rios:', recalcResult.totalUsers || 0);
    console.log('üìà Usu√°rios atualizados:', recalcResult.updatedCount || recalcResult.updatedUsers || 0);
    console.log('‚ùå Erros:', recalcResult.errors || recalcResult.errorCount || 0);
    console.log('‚è±Ô∏è Dura√ß√£o:', recalcDuration, 'segundos');
    console.log('‚ïê'.repeat(80));
    
    // DIAGN√ìSTICO FINAL
    console.log('\n%cüéØ DIAGN√ìSTICO FINAL:', 'font-size: 18px; font-weight: bold; color: #2196F3;');
    
    if (recalcResult.totalUsers === 0) {
      console.log('‚ùå PROBLEMA: Nenhum usu√°rio foi encontrado!');
      console.log('   Verifique se h√° usu√°rios no banco.');
    } else if ((recalcResult.updatedCount || recalcResult.updatedUsers || 0) === 0) {
      console.log('‚ö†Ô∏è ATEN√á√ÉO: 0 usu√°rios atualizados pode significar:');
      console.log('\n   OP√á√ÉO 1: Pontos j√° est√£o corretos ‚úÖ');
      console.log('   - Todos os usu√°rios j√° t√™m os pontos calculados corretamente');
      console.log('   - Nenhuma atualiza√ß√£o necess√°ria');
      console.log('   - Isso √© NORMAL se j√° calculou antes');
      console.log('\n   OP√á√ÉO 2: Configura√ß√£o de pontos est√° vazia ‚ùå');
      console.log('   - Tabela points_configuration est√° vazia');
      console.log('   - Fun√ß√£o retorna 0 para todos');
      console.log('   - SOLU√á√ÉO: Executar reset da config');
      console.log('\n   OP√á√ÉO 3: Campos dos usu√°rios est√£o vazios ‚ùå');
      console.log('   - Usu√°rios n√£o t√™m engajamento, classifica√ß√£o, etc.');
      console.log('   - C√°lculo resulta em 0 pontos');
      console.log('   - SOLU√á√ÉO: Preencher dados dos usu√°rios');
      
      // Verificar qual √© o caso
      if (testUser && testUser.points === 0) {
        console.log('\nüí° PROV√ÅVEL CAUSA: Configura√ß√£o vazia ou campos vazios');
        console.log('\nüîß SOLU√á√ÉO R√ÅPIDA:');
        console.log('   Execute este comando para resetar a config:');
        console.log('\n   fetch("/api/system/points-config/reset", {method: "POST"})');
        console.log('     .then(r => r.json())');
        console.log('     .then(d => console.log("‚úÖ", d));');
      } else if (testUser && testUser.points > 0) {
        console.log('\n‚úÖ NORMAL: Pontos j√° foram calculados anteriormente');
        console.log('   Para for√ßar rec√°lculo, zere os pontos primeiro:');
        console.log('\n   // Zerar pontos de todos');
        console.log('   fetch("/api/system/zero-all-points", {method: "POST"})');
        console.log('     .then(() => fetch("/api/system/recalculate-points", {method: "POST"}))');
        console.log('     .then(r => r.json())');
        console.log('     .then(d => console.log("‚úÖ", d));');
      }
    } else {
      console.log('‚úÖ SISTEMA FUNCIONANDO!');
      console.log(`   ${recalcResult.updatedCount || recalcResult.updatedUsers} usu√°rios foram atualizados com sucesso.`);
    }
    
  } catch (error) {
    console.log('\n' + '‚ïê'.repeat(80));
    console.error('%c‚ùå ERRO NO DIAGN√ìSTICO!', 'font-size: 20px; font-weight: bold; color: #F44336;');
    console.error('Erro:', error.message);
    console.error('Stack:', error.stack);
    console.log('‚ïê'.repeat(80));
  }
})();

console.log('\n%c‚ÑπÔ∏è AGUARDE:', 'font-size: 14px; font-weight: bold; color: #2196F3;');
console.log('O diagn√≥stico completo est√° em execu√ß√£o...');

