// ========== DIAGN√ìSTICO PASSO A PASSO (n√£o trava) ==========

console.clear();
console.log('üîç DIAGN√ìSTICO SIMPLES\n');

// PASSO 1
console.log('1Ô∏è‚É£ Service Worker...');
navigator.serviceWorker.getRegistration().then(reg => {
  if (reg) {
    console.log('‚úÖ SW:', reg.active ? 'ATIVO' : 'INATIVO');
  } else {
    console.log('‚ùå SW n√£o registrado');
  }
}).catch(e => console.log('‚ùå Erro SW:', e));

// PASSO 2
console.log('\n2Ô∏è‚É£ Caches...');
caches.keys().then(names => {
  console.log('Caches:', names);
  console.log('v28?', names.some(n => n.includes('v28')) ? '‚úÖ' : '‚ùå');
}).catch(e => console.log('‚ùå Erro caches:', e));

// PASSO 3
console.log('\n3Ô∏è‚É£ IndexedDB...');
indexedDB.databases().then(dbs => {
  console.log('DBs:', dbs.map(d => d.name));
}).catch(e => console.log('‚ùå Erro IDB:', e));

// PASSO 4 - Tentar abrir DB
console.log('\n4Ô∏è‚É£ Abrindo 7care-sync-db...');
const req = indexedDB.open('7care-sync-db', 2);
req.onsuccess = () => {
  const db = req.result;
  console.log('‚úÖ DB aberto:', db.name, 'v' + db.version);
  console.log('Stores:', Array.from(db.objectStoreNames));
  
  if (db.objectStoreNames.contains('local-data')) {
    console.log('‚úÖ local-data EXISTE!');
  } else {
    console.log('‚ùå local-data N√ÉO EXISTE!');
  }
};
req.onerror = (e) => {
  console.log('‚ùå Erro ao abrir DB:', e);
};

console.log('\n‚è≥ Aguardando resultados...\n');
