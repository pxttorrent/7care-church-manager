// Script para diagnosticar e resolver problema de pontua√ß√£o
import https from 'https';

const BASE_URL = 'https://7care.netlify.app';

function request(path, method = 'GET', body = null) {
  return new Promise((resolve, reject) => {
    const url = new URL(path, BASE_URL);
    const options = {
      hostname: url.hostname,
      path: url.pathname + url.search,
      method: method,
      headers: {
        'Content-Type': 'application/json'
      }
    };

    const req = https.request(options, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        try {
          resolve({ status: res.statusCode, data: JSON.parse(data) });
        } catch (e) {
          resolve({ status: res.statusCode, data: data });
        }
      });
    });

    req.on('error', reject);
    
    if (body) {
      req.write(JSON.stringify(body));
    }
    
    req.end();
  });
}

async function diagnosticarEResolver() {
  console.log('üîç DIAGN√ìSTICO E SOLU√á√ÉO AUTOM√ÅTICA\n');
  console.log('‚ïê'.repeat(60));
  
  try {
    // 1. Verificar usu√°rios
    console.log('\nüìä [1/4] Verificando usu√°rios...');
    const usersRes = await request('/api/users');
    
    if (usersRes.status !== 200) {
      console.error('‚ùå Erro ao buscar usu√°rios:', usersRes.status);
      return;
    }
    
    const users = usersRes.data;
    console.log(`‚úÖ Total de usu√°rios: ${users.length}`);
    console.log(`   Admins: ${users.filter(u => u.role === 'admin').length}`);
    console.log(`   N√£o-admins: ${users.filter(u => u.role !== 'admin').length}`);
    
    const sample = users.find(u => u.role !== 'admin');
    if (sample) {
      console.log(`\nüìã Exemplo de usu√°rio:`);
      console.log(`   Nome: ${sample.name}`);
      console.log(`   Pontos atuais: ${sample.points || 0}`);
      console.log(`   Engajamento: ${sample.engajamento || 'N√ÉO DEFINIDO ‚ùå'}`);
      console.log(`   Classifica√ß√£o: ${sample.classificacao || 'N√ÉO DEFINIDO ‚ùå'}`);
      console.log(`   Dizimista: ${sample.dizimista_type || sample.dizimistaType || 'N√ÉO DEFINIDO ‚ùå'}`);
    }
    
    // 2. Verificar configura√ß√£o
    console.log('\nüìä [2/4] Verificando configura√ß√£o de pontos...');
    const configRes = await request('/api/system/points-config');
    
    let configExists = false;
    if (configRes.status === 200 && configRes.data && configRes.data.engajamento) {
      console.log('‚úÖ Configura√ß√£o existe!');
      console.log('   Engajamento:', configRes.data.engajamento);
      console.log('   Dizimista:', configRes.data.dizimista);
      console.log('   Classifica√ß√£o:', configRes.data.classificacao);
      configExists = true;
    } else {
      console.log('‚ùå Configura√ß√£o N√ÉO existe ou est√° vazia!');
      console.log('   Status:', configRes.status);
      console.log('   Data:', configRes.data);
    }
    
    // 3. Criar configura√ß√£o se necess√°rio
    if (!configExists) {
      console.log('\nüîß [3/4] Criando configura√ß√£o padr√£o...');
      const resetRes = await request('/api/system/points-config/reset', 'POST');
      
      if (resetRes.status === 200) {
        console.log('‚úÖ Configura√ß√£o padr√£o criada com sucesso!');
        console.log('   Resultado:', resetRes.data);
        
        // Aguardar 3 segundos para garantir que foi salva
        console.log('   Aguardando 3 segundos...');
        await new Promise(r => setTimeout(r, 3000));
        
        // Verificar se foi criada
        const verifyRes = await request('/api/system/points-config');
        if (verifyRes.status === 200 && verifyRes.data.engajamento) {
          console.log('‚úÖ Configura√ß√£o verificada e confirmada!');
        } else {
          console.error('‚ùå Configura√ß√£o n√£o foi criada corretamente');
          console.error('   Verifique os logs do Netlify');
          return;
        }
      } else {
        console.error('‚ùå Erro ao criar configura√ß√£o:', resetRes.status);
        console.error('   Resposta:', resetRes.data);
        return;
      }
    } else {
      console.log('\n‚úÖ [3/4] Configura√ß√£o j√° existe, pulando cria√ß√£o...');
    }
    
    // 4. Recalcular pontos
    console.log('\nüîÑ [4/4] Recalculando pontos de TODOS os usu√°rios...');
    console.log('Aguarde... (pode levar 20-30 segundos com 327 usu√°rios)\n');
    
    const startTime = Date.now();
    const recalcRes = await request('/api/system/recalculate-points', 'POST');
    const duration = ((Date.now() - startTime) / 1000).toFixed(1);
    
    console.log('\n‚ïê'.repeat(60));
    console.log('üéâ RESULTADO FINAL');
    console.log('‚ïê'.repeat(60));
    
    if (recalcRes.status === 200) {
      const result = recalcRes.data;
      console.log('‚úÖ Sucesso:', result.success);
      console.log('üë• Total de usu√°rios:', result.totalUsers || 0);
      console.log('üìà Usu√°rios atualizados:', result.updatedCount || result.updatedUsers || 0);
      console.log('‚ùå Erros:', result.errors || result.errorCount || 0);
      console.log('‚è±Ô∏è Dura√ß√£o:', duration, 'segundos');
      
      if ((result.updatedCount || result.updatedUsers || 0) > 0) {
        console.log('\n‚úÖ‚úÖ‚úÖ PROBLEMA RESOLVIDO! ‚úÖ‚úÖ‚úÖ');
        console.log(`${result.updatedCount || result.updatedUsers} usu√°rios foram atualizados com sucesso!`);
        console.log('\nAcesse: https://7care.netlify.app/users');
        console.log('Para ver os pontos atualizados.');
      } else {
        console.log('\n‚ö†Ô∏è Ainda 0 usu√°rios atualizados.');
        console.log('\nAN√ÅLISE:');
        
        if (sample && sample.points > 0) {
          console.log('‚úÖ Os usu√°rios J√Å T√äM pontos calculados.');
          console.log('   Isso √© NORMAL - pontos j√° est√£o corretos.');
          console.log('   M√©dia:', Math.round(users.filter(u => u.role !== 'admin').reduce((s,u) => s + (u.points||0), 0) / users.filter(u => u.role !== 'admin').length));
        } else if (!sample.engajamento && !sample.classificacao) {
          console.log('‚ùå Os usu√°rios N√ÉO T√äM campos preenchidos!');
          console.log('   Engajamento, classifica√ß√£o, etc. est√£o vazios.');
          console.log('   Por isso o c√°lculo retorna 0 pontos.');
          console.log('\nüí° SOLU√á√ÉO:');
          console.log('   Edite os usu√°rios e preencha os campos:');
          console.log('   - Engajamento (Baixo/M√©dio/Alto)');
          console.log('   - Classifica√ß√£o (Frequente/N√£o Frequente)');
          console.log('   - Dizimista, Ofertante, etc.');
        } else {
          console.log('‚ùì Causa desconhecida. Verifique os logs do Netlify.');
        }
      }
    } else {
      console.error('‚ùå Erro no rec√°lculo. Status:', recalcRes.status);
      console.error('   Resposta:', recalcRes.data);
    }
    
    console.log('\n‚ïê'.repeat(60));
    
  } catch (error) {
    console.error('\n‚ùå ERRO FATAL:', error.message);
    console.error(error);
  }
}

// Executar
diagnosticarEResolver();

