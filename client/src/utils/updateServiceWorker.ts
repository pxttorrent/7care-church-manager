// Utilit√°rio para for√ßar atualiza√ß√£o do Service Worker
export const forceUpdateServiceWorker = async () => {
  if ('serviceWorker' in navigator) {
    try {
      const registration = await navigator.serviceWorker.getRegistration();
      
      if (registration) {
        console.log('üîÑ For√ßando atualiza√ß√£o do Service Worker...');
        
        // Verificar se h√° uma nova vers√£o esperando
        if (registration.waiting) {
          console.log('üì¶ Nova vers√£o encontrada, ativando...');
          registration.waiting.postMessage({ type: 'SKIP_WAITING' });
          
          // Recarregar a p√°gina ap√≥s a atualiza√ß√£o
          window.location.reload();
        } else {
          // For√ßar atualiza√ß√£o
          await registration.update();
          console.log('‚úÖ Service Worker atualizado');
        }
      } else {
        console.log('‚ö†Ô∏è Nenhum Service Worker registrado');
      }
    } catch (error) {
      console.error('‚ùå Erro ao atualizar Service Worker:', error);
    }
  }
};

// Fun√ß√£o para verificar se h√° atualiza√ß√µes dispon√≠veis
export const checkForServiceWorkerUpdates = async () => {
  if ('serviceWorker' in navigator) {
    try {
      const registration = await navigator.serviceWorker.getRegistration();
      
      if (registration) {
        const newRegistration = await navigator.serviceWorker.register('/sw.js');
        
        if (newRegistration.waiting) {
          console.log('üÜï Nova vers√£o do Service Worker dispon√≠vel!');
          return true;
        }
      }
    } catch (error) {
      console.error('‚ùå Erro ao verificar atualiza√ß√µes:', error);
    }
  }
  
  return false;
};
